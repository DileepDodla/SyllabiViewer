{
    "totalcredits": 23,
    "subcount": 6,
    "labcount": 2,
    "sub1": [
        {
            "code": "CST 09",
            "title": "Theory of Computation",
            "credits": "4",
            "unit1": "Review of Basic Mathematical Objects: Sets, Logic, FunctionRelations, Languages.\n\nReview of Mathematical Induction and Recursive Definitions: Proofs, Mathematical Induction, Recursive Definitions, Structural Induction.\n\nRegular Expressions and Finite Automata: Regular languages, Regular expressions, Memory requirement for language recognition, Finite automata, Distinguishing strings, Unions, Intersections, and Complements.\n\nFinite Automata with Output: Moore machine, Mealy machine, Moore versus Mealy, Transducers as models of sequential circuits.",
            "unit2": "Nondeterminism and Kleene’s Theorem: Nondeterministic finite automata (NFA), NFA with Λ-transitions, Kleene’s theorem.\n\nRegular and Nonregular Languages: A criterion for regularity, Minimal finite automata, Pumping lemma for regular languages, Decision problems, Regular languages versus programming languages.",
            "unit3": "Contex-Free Grammars: Definition, Examples, Regular grammars, Derivation trees and ambiguity, An unambiguous CFG for algebraic expressions, Simplified forms and normal forms.\n\nPushdown Automata: Definition, Deterministic pushdown automata, Pushdown automata versus context-free grammar, Parsing.",
            "unit4": "Context-Free and Non-Context-Free Languages: Pumping lemma for context-free languages, Intersections and Complements of context-free languages, Decision problems involving context-free languages.\n\nTuring Machines: Definition, Examples, Computing a partial function with a Turing machine, Combining Turing machines, Multi-tape Turing machines, Non deterministic Turing machines, Universal Turing machines, Models of computation and the Church-Turing thesis.",
            "unit5": "Recursively Enumerable Languages: Recursively enumerable and recursive, Enumerating a language, More general grammars, Context-sensitive languages and the Chomsky hierarchy, Not recursively enumerable languages.\n\nUnsolvable Problems: Non-recursive languages and unsolvable problems, Reducing one problem to another – Halting problem, Other unsolvable problems involving Turing machines, Rice’s theorem, Post’s correspondence problem, Unsolvable problems involving context-free languages.\n\nComputable Functions: Primitive recursive functions, Primitive recursive predicates and some bounded operations, Unbounded minimalization and μ-recursive functions, Gödel numbering, Computable functions versus μ-recursive functions, Non-numeric functions, and computability.",
            "textbooks": "1. Martin J C, Introduction to Languages and the Theory of Computation, 3rd edition, Tata McGrawHill, 2003.\n2. Hopcroft J E, Motwani R, and Ullman J D, Introduction to Automata Theory, Languages, and Computation, 3rd edition, Pearson Education, 2008.",
            "refbooks": "1. Krithivasan K, Introduction to Formal Languages, Automata Theory and Computation, Pearson Education, 2009.\n2. Rich E, Automata, Computability, and Complexity – Theory and Applications, Pearson Education, 2012.\n3. Singh A, Elements of Computation Theory, Springer, 2009.\n4. Cohen D I A, Introduction to Computer Theory, 2nd edition, John Wiley, 2000.\n5. Lewis H, Papadimitriou C H, Elements of the Theory of Computation, 2nd edition, Prentice Hall, 1997."
        }
    ],
    "sub2": [
        {
            "code": "CST 10",
            "title": "Unified Modeling Language",
            "credits": "2",
            "unit1": "UML Overview - UML history, Goals of UML, Complexity of UML, UML assessment, UML concept areas.\n\nNature and Purpose of Models - What is a model, What are the models for, levels of models, What is in model, what does a model means.",
            "unit2": "UML walkthrough - UML views, static views, Use case view, Static machine view, Activity view, intersection view, Deployment view, Model management view.\n\nStatic view - Classifier, relationships, association, Generalization, Realization, Dependency, Constraint, Instance.",
            "unit3": "Design view - Structured classifier, classification, patterns, and component.\n\nUser case view - actors, use case.\n\nStatic machne view - Machines, event, state, transition, composite state.",
            "unit4": "Activity view - Activity, activity and other views, action.\n\nInteraction view - Interaction, sequence diagram, communication diagram.\n\nDeployment view - Node, artifact.",
            "unit5": "Model management view - Package, dependency on packages, visibility, import, model.\n\nProfiles - Stereotype, tagged value, profile.\n\nUML environment - Semantics responsibilities, notation responsibilities, Programming Language responsibilities, modeling with tools.",
            "textbooks": "1. James Rinbaugh, Ivar Jacobson, Grady Booch, Unified Modelling Language, Reference Manual, AddisonWesley, New Yark.\n2. Grady Booch, James Rumbaugh and Ivar Jacobson. The Unified Modeling Language User Guide, Addison –Wesly ,1999.",
            "refbooks": "1. Timothy C. Lethbridge and Robert laganiere, Object-Oriented Software Engineering Practical software development using UML and JAVA International Edition, McGraw-hill Education Asia 2002.\n2. Grady Booch ,Robert A. Maksimchuk, Object-Oriented Analysis and Design with Applications (3rd Edition) 3rd Edition , 2007.\n3. P.Venkata Subba Reddy, Object-Oriented Programming through Java, SCITECH, 2007."
        }
    ],
    "sub3": [
        {
            "code": "CST 11",
            "title": "Operating Systems",
            "credits": "3",
            "unit1": "Introduction: Definition of operating system, User view, System view, Computer system organization, Computer system architecture, Operating system structure, Operating system operations, Process management, Memory management, Storage management, Protection and security, Distributed systems, Special purpose systems, Computing environments.\n\nSystem Structures: Operating system services, User – Operating system interface, System calls, Types of system calls, System programs, Operating system design and implementation, Structure, Implementation, System generation, System boot.",
            "unit2": "Process Concept: Process scheduling, Operations on processes, Interprocess communication, Communication in client server systems.\n\nMultithreaded Programming: Multitheading models, Thread libraries, Threading issues, Examples.\n\nProcess Scheduling: Basic concepts, Scheduling criteria, Scheduling algorithms, Multiple-processor scheduling, Thread scheduling, Examples.\n\nInter-process Communication: Race conditions, Critical Regions, Mutual exclusion with busy waiting, Sleep and wakeup, Semaphores, Mutexes, Monitors, Message passing, Barriers, Classical IPC Problems - Dining philosophers problem, Readers and writers problem.",
            "unit3": "Memory-Management Strategies: Introduction, Swapping, Contiguous memory allocation, Paging, Segmentation, Examples.\n\nVirtual Memory Management: Introduction, Demand paging, Copy-on-write, Page replacement, Frame allocation, Thrashing, Memory-mapped files, Kernel memory allocation, Examples.",
            "unit4": "Deadlocks: Resources, Conditions for resource deadlocks, Ostrich algorithm, Deadlock detection and recovery, Deadlock avoidance, Deadlock prevention.\n\nFile Systems: Files, Directories, File system implementation, management and optimization.\n\nSecondary-Storage Structure: Overview of disk structure, and attachment, Disk scheduling, RAID structure, Stable storage implementation.",
            "unit5": "System Protection: Goals of protection, Principles and domain of protection, Access matrix, Access control, Revocation of access rights.\n\nSystem Security: Introduction, Program threats, System and network threats, Cryptography for security, User authentication, Implementing security defenses, Firewalling to protect systems and networks, Computer security classification.\n\nCase Studies: Linux, Microsoft Windows XP, and Vista.",
            "textbooks": "1. Silberschatz A, Galvin P B, and Gagne G, Operating System Concepts, 8th edition, Wiley, 2009.\n2. Tanenbaum A S, Modern Operating Systems, 3rd edition, Pearson Education, 2008. (for Interprocess Communication, File systems, and Case studies)",
            "refbooks": "1. Tanenbaum A S, Woodhull A S, Operating Systems Design and Implementation, 3rd edition, PHI, 2006.\n2. Dhamdhere D M, Operating Systems – A Concept-Based Approach, 3rd edition, Tata McGraw-Hill, 2012.\n3. Stallings W, Operating Systems – Internals and Design Principles, 6th edition, Pearson Education, 2009.\n4. Nutt G, Operating Systems, 3rd edition, Pearson Education, 2004."
        }
    ],
    "sub4": [
        {
            "code": "CST 12",
            "title": "Computer Netowrks",
            "credits": "4",
            "unit1": "Computer Networks and the Internet: A services description, Access networks, Circuit Switching and Packet Switching, ISPs and Internet backbones, Delay, Loss, and throughput in Packet-Switched Networks, Protocol layers and their service models, Security threats, History of computer networking and the Internet, Recent developments.\n\nApplication Layer: Network application architectures, Application-layer protocols, The Web and HTTP, Non-persistent and Persistent connections, Cookies, Web caching, FTP, Electronic mail, SMTP, Mail message formats, Mail access protocols, DNS, DNS services, DNS operation, DNS records and messages.",
            "unit2": "Peer-to-Peer applications, P2P file distribution, Distributed Hash Tables (DHTs), P2P Internet telephony with Skype, Socket programming with TCP, Socket programming with UDP.\n\nTransport Layer: Transport-layer services, Multiplexing and Demultiplexing, Connectionless transport - UDP, UDP Segment structure and Checksum, Reliable data transfer - principles and protocols, Go-Back-N (GBN), Selective Repeat (SR), Connection-oriented transport - TCP, The TCP segment structure, Round-trip time estimation and timeout, Reliable data transfer, Flow control, TCP connection management, Principles of Congestion control, Causes and the costs of Congestion, Approaches to Congestion control, ATM ABR Congestion control, TCP Congestion control, Fairness.",
            "unit3": "The Network Layer: Forwarding and Routing, Network service models, Virtual-circuit networks, Datagram networks, Architecture of a Router, Input ports, Switching fabric, Output ports, Queuing, The Internet Protocol (IP), Datagram format, IPv4 addressing, Internet Control Message Protocol (ICMP), IPv6, IP Security, The Link-State (LS) routing algorithm, The Distance-Vector (DV) routing algorithm, Hierarchical routing, Intra-AS routing in the Internet: RIP and OSPF, Inter-AS Routing: BGP, Broadcast routing algorithms, Multicast algorithms.\n\nThe Link Layer and LANs: Link layer services, Review of Error-Detection and - Correction Techniques, Multiple access protocols, Channel partitioning protocols, Random access protocols, Taking-turns protocols, Local Area Networks (LANs), Link-layer addressing, MAC addresses, Address Resolution Protocol (ARP), Ethernet, Ethernet frame structure, CSMA/CD: Ethernet's Multiple Access protocol, Ethernet technologies, Link-layer switches, Forwarding and Filtering, Selflearning, Properties of Link-Layer switching, Switches Versus Routers, Virtual Local Area Networks (VLANs), The Point-to-Point Protocol (PPP), PPP Data framing, Link virtualization.",
            "unit4": "Wireless and Mobile Networks: Wireless links and Network characteristics, WiFi: 802.11 Wireless LANs, The 802.11 Architecture, The 802.11 MAC protocol, The IEEE 802.11 Frame, Mobility in the same IP subnet, Introduction to Bluetooth and WiMAX, Cellular Internet access, Overview of Cellular architecture, Mobility Management - Principles, Addressing, Routing to a Mobile Node, Mobile IP, Routing calls to a mobile user, Handoffs in GSM, Wireless and Mobility - Impact on Higher-layer Protocols.\n\nMultimedia Networking: Multimedia networking applications, Quality of Service (QoS), Present limitations and Solutions, Audio and Video Compression, Streaming Stored audio and video, RealTime Streaming Protocol (RTSP), Making the best of the Best-Effort Service, Limitations of BestEffort Service, Removing Jitter, Recovering from Packet Loss, Distributing Multimedia - Content Distribution Networks, Dimensioning Best-Effort Networks to Provide Quality of Service, Protocols for Real-Time interactive applications, RTP, RTP Control Protocol (RTCP), SIP, H.323, Providing Multiple Classes of Service, Scheduling and Policing Mechanisms, Diffserv, Providing Quality of Service Guarantees, Resource Reservation, Call Admission, Call Setup, Guaranteed QoS in the Internet - Intserv and RSVP.",
            "unit5": "Security in Computer Networks: Network Security, Secure E-mail, PGP, Securing TCP connections - SSL, Network-Layer Security - IPsec and Virtual Private Networks (VPNs), AH and ESP Protocols, Security Associations, IPsec Datagram, IKE: Key Management in IPsec, Securing Wireless LANs, Wired Equivalent Privacy (WEP), IEEE802.11i, Operational Security - Firewalls and Intrusion Detection Systems.\n\nNetwork Management: Introduction to Network Management, Infrastructure for network management, The Internet-Standard Management Framework, Structure of Management Information (SMI), Management Information Base (MIB), SNMP protocol operations and transport mappings, Security and Administration, ASN.l.",
            "textbooks": "1. Kurose J F, Ross K W, Computer Networking – A Top-Down Approach, 5th edition, Pearson Education, 2010.",
            "refbooks": "1. Tanenbaum A S, Wetherall D J, Computer Networks, 5th edition, Pearson Education, 2011.\n2. Peterson L L, Davie B S, Computer Networks - A Systems Approach, 5th edition, Morgan Kaufmann, 2011.\n3. Forouzan B A, Mosharraf F, Computer Networks – A Top-Down Approach, Tata McGraw-Hill, 2012.\n4. Olifer N, Olifer V, Computer Networks – Principles, Technologies, and Protocols for Network Design, Wiley, 2006."
        }
    ],
    "sub5": [
        {
            "code": "CST 13",
            "title": "Principles of Programming Languages",
            "credits": "3",
            "unit1": "Preliminaries: Programming domains, Language evaluation criteria, Influences on language design, Language categories, Language design trade-offs, Implementation methods, Programming environments.\n\nEvolution of Major Programming Languages: Pseudocodes, Fortran, Lisp, ALGOL60, COBOL, BASIC, PL/I, APL, SNOBOL, SIMULA 67, ALGOL 68, Prolog, Ada, Smalltalk, C++, Java, Scripting Languages, C#, Hybrid languages.\n\nDescribing Syntax and Semantics: Formal methods of describing syntax, Attribute grammars, Dynamic semantics.\n\nIntroduction to Lexical and Syntax Analysis: Lexical analysis, Syntax analysis – Top-down and Bottom-up parsing.",
            "unit2": "Names, Bindings, and Scopes: Names, Variables, Concept of binding, Scope, Scope and lifetime, Referencing environments, Named constants.\n\nData Types: Primitive data types, Character string types, User-defined ordinal types, Array types, Associative arrays, Record types, Tuple types, List types, Union types, Pointer and reference types, Type checking, Strong typing, Type equivalence.\n\nExpressions and Assignment Statements: Arithmetic expressions, Overloaded operators, Type conversions, Relational and Boolean expressions, Short-circuit evaluation, Assignment statements, Mixed-mode assignment.",
            "unit3": "Statement-Level Control Structures: Selection statements, Iterative statements, Unconditional branching, Guarded commands.\n\nSubprograms: Fundamentals, Design issues, Local referencing environments, Parameter-passing methods, Parameters that are subprograms, Overloaded subprograms, Generic subprograms, Design issues for functions, User-defined overloaded operators, Coroutines.\n\nImplementing Subprograms: General semantics of calls and returns, Implementing simple subprograms, Implementing subprograms with stack-dynamic local variables, Nested subprograms, Blocks, Implementing dynamic scoping, Implementing parameters that are subprogram names.",
            "unit4": "Abstract Data Types and Encapsulation Constructs: Concept of abstraction, Data abstraction, Design issues for abstract data types, Language examples, Parameterized abstract data types, Encapsulation constructs, Naming encapsulations.\n\nSupport for Object-Oriented Programming: Object-oriented programming, Design issues for object-oriented languages, Support for object-oriented programming in – Smalltalk, C++, Java, C#, Ada95, Ruby; Object model of JavaScript, Implementation of object-oriented constructs.\n\nConcurrency: Subprogram-level concurrency, Semaphores, Monitors, Message passing, Concurrency in Ada 95, Java threads, C# threads, Concurrency in functional languages, Statement-level concurrency.",
            "unit5": "Exception Handling and Event Handling: Introduction to exception handling, Exception handling in - Ada, C++, Java; Introduction to event handling, Event handling in Java, and C#.\n\nFunctional Programming Languages: Mathematical functions, Fundamentals of functional programming languages, Introduction to – LISP, Scheme, ML, Haskell, F#; Applications of functional languages, Comparison of functional and imperative languages.\n\nLogic Programming Languages: Introduction to predicate calculus, Predicate calculus and proving theorems, Overview of logic programming, Origins of prolog, Basic elements of prolog, Deficiencies of prolog, Applications of Logic Programming.",
            "textbooks": "1. Sebesta R W, Concepts of Programming Languages, 10th Edition, Addison-Wesley, 2013.",
            "refbooks": "1. Louden K C, Lambert K, Programming Languages – Principles and Practice, 3nd Edition, Course Technology, 2011.\n2. Tucker A B, Noonan R E, Programming Languages – Principles and Paradigms, 2nd Edition, Tata McGraw-Hill, 2007.\n3. Pratt T W, Zelkowitz M V, and Gopal T V, Programming Languages – Design and Implementation, 4th Edition, Pearson Education, 2006.\n4. Ghezzi C, Jazayeri M, Programming Language Concepts, 3rd Edition, Wiley, 1998.\n5. Scott M L, Programming Language Pragmatics, 3rd edition, Morgan Kaufmann, 2009.\n6. Friedman D P, Wand M, Essentials of Programming Languages, 3rd edition, MIT, 2008.\n7. Gabbrielli M, Martini S, Programming Languages: Principles and Paradigms, Springer, 2012.\n8. Dowek G, Levy J J, Introduction to the Theory of Programming Languages, Springer, 2011."
        }
    ],
    "sub6": [
        {
            "code": "CST 14",
            "title": "Software Engineering",
            "credits": "3",
            "unit1": "Software and Software Engineering: Nature of software, Unique nature of WebApps, Software engineering, The software process, Software engineering practice, Software myths.\n\nProcess Models: A generic process model, Process assessment and improvement, Prescriptive process models - Waterfall model, Incremental process models, Evolutionary process models, Concurrent models; Specialized process models - Component-based development, The formal methods model, Aspect-oriented software development; The unified process, Personal and Team process models, Product and process.",
            "unit2": "Agile Development: Concept of agility, Agility and cost of change, The agile process, Agility principles, Extreme programming (XP), The XP process, The XP debate, Other agile process models - Adaptive software development, Scrum, Dynamic systems development method, Crystal, Feature driven development, Lean software development, Agile modeling, Agile unified process; A tool set for the agile process.\n\nPrinciples that Guide Practice: Software engineering knowledge, Core principles, Principles that guide each framework activity - Communication principles, Planning principles, Modeling principles, Construction principles, Deployment principles.\n\nUnderstanding Requirements: Requirements engineering, Establishing the groundwork, Eliciting requirements, - Collaborative requirements gathering, Quality function deployment, Usage scenarios, Elicitation work products; Developing use cases, Building the requirements model, Negotiating and validating requirements.",
            "unit3": "Requirements Modeling: Scenarios, Information, and Analysis Classes: Requirements analysis, Overall objective and philosophy, Requirements modeling approaches, Scenario-based modeling, UML Use Case, Activity diagram, Swimlane diagrams, Data modeling concepts, Class-based modeling, Class-responsibility-collaborator modeling.\n\nRequirements Modeling: Flow, Behavior, Patterns, and WebApps: Requirements modeling strategies, Flow-oriented modeling, Creating a behavioral model, Patterns for requirements modeling, Requirements modeling for WebApps.",
            "unit4": "Design Concepts: Design within the context of software engineering, The design process, Design concepts – Abstraction, Patterns, Modularity, Information hiding, Functional independence, Refinement, Refactoring, Object-oriented design concepts; The design model.- Data design, Architectural design, Interface design, Component-level design, Deployment-level design.\n\nArchitectural Design: Software architecture, Architectural genres, Architectural style, Architectural design, Assessing alternate architectural designs, Architectural complexity, Architectural mapping using data flow.\n\nComponent-level Design: Concept of a component, Designing class based components, Conducting component-level design, Component-level design of WebApps, Designing traditional components, Component-based development.",
            "unit5": "User Iinterface Design: The golden rules, User interface analysis and design, Interface analysis, Interface design steps, WebApp interface design.\n\nPattern-based Design: Design patterns, Pattern-based software design, Architectural patterns, Component- level design patterns, User interface design patterns, WebApps design patterns.\n\nWebapp Design: WebApps design quality, Design goals, A design pyramid for WebApps, WebApps interface design, Aesthetic design, Content design, Architecture design, Navigation design, Component-level design, Object oriented hypermedia design method.",
            "textbooks": "1. Pressman R S, Software Engineering: A Practitioner’s Approach, 7th edition, McGraw-Hill, 2010. (Chapters 1 to 13)",
            "refbooks": "1. Sommerville I, Software Engineering, 9th edition, Pearson Education, 2011.\n2. Jalote P, Software Engineering: A Precise Approach, Wiley, 2010.\n3. Braude E J, Bernstein M E, Software Engineering: Modern Approaches, 2nd edition, Wiley, 2010.\n4. Ghezzi C, Jazayeri M, Mandrioli D, Fundamentals of Software Engineering, 2nd edition, PHI, 2003.\n5. Saleh K A, Software Engineering, J Ross Publishing, 2009.\n6. Bruegge B, Dutoit A H, Object-Oriented Software Engineering Using UML, Patterns, and Java, 3rd edition, Prentice Hall, 2009.\n7. Tsui F, Karam O, Essentials of Software Engineering, 2nd edition, Jones & Bartlett, 2009.\n8. Schmidt M E C, Implementing the IEEE Software Engineering Standards, Sams, 2000.\n9. Pilone D, Miles R, Head First Software Development, O’Reilly (Shroff), 2008.\n10. Bennett S, McRobb S, Farmer R, Object-Oriented System Analysis and Design Using UML, 4th edition, McGraw-Hill, 2010.\n11. Lethbridge T C, Laganiere R, Object-Oriented Software Engineering, 2nd edition, McGraw-Hill, 2005."
        }
    ],
    "lab1": [
        {
            "code": "CSP 07",
            "title": "CN and PPL Lab",
            "credits": "2",
            "todo": "At least 10 Practical assignments shall be given on Computer Networks.\n\nAt least 10 Practical assignments shall be given on Principles of Programming.",
            "refbooks": ""
        }
    ],
    "lab2": [
        {
            "code": "CSP 08",
            "title": "OS & UML Lab",
            "credits": "2",
            "todo": "At least 10 Practical assignments shall be given on Operating Systems.\n\nAt least 10 Practical assignments shall be given on Unified Modeling Language.",
            "refbooks": ""
        }
    ]
}